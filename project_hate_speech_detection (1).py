# -*- coding: utf-8 -*-
"""Project_Hate_Speech_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKPAByAJKmMP1tVEGrPUbBci-YmF-DIC
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
from sklearn.svm import LinearSVC

import re
import nltk
nltk.download("stopwords")
from nltk.util import pr
stemmer = nltk.SnowballStemmer("english")
from nltk.corpus import stopwords
import string
stopword = set(stopwords.words("english"))

df = pd.read_csv("/content/drive/MyDrive/dataset/twitter_data.csv")
print(df.head())

df['labels'] = (df['class']).apply(lambda x: 1 if x < 2 else 0)
df["labels"] = df["class"].map({1 : "Hate Speech Detected",0:"No Hate and No Offense Detected"})
df["labels"] = df["labels"].fillna("No Hate and No Offense Detected")
print(df.head())

sample = pd.DataFrame(df['labels']).value_counts()
sample

plt.bar(["Hate Speech Detected","No Hate and no offense Detected"], sample, color ='maroon',width = 0.4)
plt.xlabel("Labels")
plt.ylabel("No. of Tweets")
plt.show()

df = df[['tweet','labels']]
print(df.head())
print(df.sample(50))

def clean(text):
  text = str(text).lower()
  text = re.sub('\[.*?\]','',text)
  text = re.sub('https?://\S+|www\.\S+','',text)
  text = re.sub('<.*?>+','',text)
  text = re.sub('[%s]'% re.escape(string.punctuation),'',text)
  text = re.sub('\n','',text)
  text = re.sub('\w*\d\w*','',text)
  text = [word for word in text.split(' ') if word not in stopword]
  text = " ".join(text)
  text = [stemmer.stem(word) for word in text.split(' ')]
  text = " ".join(text)
  return text
df['tweet'] = df['tweet'].apply(clean)
print(df.head())

x = np.array(df['tweet'])
y = np.array(df['labels'])
cv = CountVectorizer()
x = cv.fit_transform(x)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.25,random_state = 42)
clf = DecisionTreeClassifier()
clf.fit(x_train,y_train)

print(x.shape[0])

test_data = "shut up bitch"
df = cv.transform([test_data]).toarray()
print(clf.predict(df))

y_pred = clf.predict(x_test)
print(classification_report(y_test, y_pred))
print("Accuracy Score of the model is {}".format(accuracy_score(y_test,y_pred)))

matrix = confusion_matrix(y_test, y_pred)
print(matrix)
ConfusionMatrixDisplay(matrix).plot()
plt.show()

from sklearn.neighbors import KNeighborsClassifier
import sklearn.metrics as metrics

kValues = range(1,11,2)
y_prediction = []
y_accuracy = []
for n_neighbor in kValues:
  knn = KNeighborsClassifier(n_neighbors=n_neighbor)
  knn.fit(x_train,y_train)
  KNeighborsClassifier(knn)
  y_pred = knn.predict(x_test)
  y_prediction.append(y_pred)
  y_accuracy.append(metrics.accuracy_score(y_test,y_pred))
print(y_accuracy)
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(x_train,y_train)
KNeighborsClassifier(knn)
y_pred = knn.predict(x_test)
y_prediction.append(y_pred)
y_accuracy.append(metrics.accuracy_score(y_test,y_pred))
print("Accuracy of the Test Data \n {}".format(metrics.accuracy_score(y_test,y_pred)))
print(classification_report(y_test, y_pred))

matrix = confusion_matrix(y_test, y_pred)
print(matrix)
ConfusionMatrixDisplay(matrix).plot()
plt.show()

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model.fit(x_train.toarray(),y_train)
y_pred = model.predict(x_test.toarray())
print("Accuracy of the Test Data \n {}".format(metrics.accuracy_score(y_test,y_pred)))
print(classification_report(y_test, y_pred))

matrix = confusion_matrix(y_test, y_pred)
print(matrix)
ConfusionMatrixDisplay(matrix).plot()
plt.show()

logistic_model = LogisticRegression()
logistic_model.fit(x_train, y_train)
y_pred_log = logistic_model.predict(x_test)
y_pred_log_proba = logistic_model.predict_proba(x_test)

test_data = " I love that you enjoy being trans."
df = cv.transform([test_data]).toarray()
print(clf.predict(df))

print(classification_report(y_test, y_pred_log))
print("Accuracy of the Test Data \n {}".format(metrics.accuracy_score(y_test,y_pred_log)))

matrix = confusion_matrix(y_test, y_pred_log)
print(matrix)
ConfusionMatrixDisplay(matrix).plot()
plt.show()

svm_model  =  LinearSVC()
svm_model.fit(x_train, y_train)
y_pred = svm_model.predict(x_test)
svm_score = svm_model.score(x_test, y_test)
print("Accuracy of the Test Data \n {}".format(metrics.accuracy_score(y_test,y_pred)))
print(classification_report(y_test, y_pred_log))

matrix = confusion_matrix(y_test, y_pred)
print(matrix)
ConfusionMatrixDisplay(matrix).plot()
plt.show()

